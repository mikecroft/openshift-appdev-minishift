def GUID = "f704"
def CLUSTER = "na39.openshift.opentlc.com"
def customSlavePod = "maven-appdev"
def customSlaveContainer = "172.30.1.1:5000/${GUID}-jenkins/jenkins-slave-maven-appdev"
def APP="MLBParks"
def app="mlbparks"

podTemplate(label: customSlavePod
          , serviceAccount: 'jenkins'
          , cloud: 'openshift'
          , containers: [containerTemplate(
                          name: 'jnlp'
                        , image: customSlaveContainer
                        , workingDir: "/tmp"
                        , command: ''
                        , alwaysPullImage: false
                        , ttyEnabled: false
                        , args: '${computer.jnlpmac} ${computer.name}'
                        , resourceLimitCpu: '800m'
                        , resourceLimitMemory: '2Gi'
                        , resourceRequestMemory: '1Gi')]
              ){
  node(customSlavePod) {

    def mvnCmd = "mvn -s ./nexus_settings.xml -f ${APP}/pom.xml"
    def ocnd = "oc -n ${GUID}-parks-dev"
    def ocnp = "oc -n ${GUID}-parks-prod"

    echo "GUID: ${GUID}"
    echo "CLUSTER: ${CLUSTER}"

    // Checkout Source Code
          stage('Checkout Source') {
              echo "Checking out source"
              checkout([
                    $class: 'GitSCM'
                  , branches: [[name: '*/master']]
                  , doGenerateSubmoduleConfigurations: false
                  , extensions: []
                  , submoduleCfg: []
                  , userRemoteConfigs: [[
                        url: 'https://github.com/mikecroft/openshift-appdev.git'
                        ]]
                  ])
          }

          // Extract version and other properties from the pom.xml
          def groupId    = getGroupIdFromPom("${APP}/pom.xml")
          def artifactId = getArtifactIdFromPom("${APP}/pom.xml")
          def version    = getVersionFromPom("${APP}/pom.xml")

          def devTag  = version + env.BUILD_ID
          def prodTag = version
          

          // Using Maven build the war file
          // Do not run tests in this step
          stage('Build war') {
            echo "Building version ${version}"
            sh "${mvnCmd} -DskipTests install"
          }

          // Using Maven run the unit tests
          stage('Unit Tests') {
            echo "Running Unit Tests"
            // sh "${mvnCmd} test"
          }

          // Using Maven call SonarQube for Code Analysis
          stage('Code Analysis') {
            echo "Running Code Analysis"
            // sh "${mvnCmd} sonar:sonar -Dsonar.host.url=http://sonarqube-${GUID}-sonarqube.apps.${CLUSTER}"
          }

          // Publish the built war file to Nexus
          stage('Publish to Nexus') {
            echo "Publish to Nexus"
            // sh "${mvnCmd} deploy deploy -DskipTests=true -DaltDeploymentRepository=nexus::default::http://nexus3-${GUID}-nexus.apps.${CLUSTER}/repository/releases"
          }

          // Build the OpenShift Image in OpenShift and tag it.
          stage('Build and Tag OpenShift Image') {
            echo "Building OpenShift container image ${app}:${devTag}"
            // start build
            sh "${ocnd} start-build ${app} --follow --from-file=./${APP}/target/${app}.war --wait=true"  
            
            // Use Nexus instead
            // sh "${ocnd} start-build ${app} --follow --from-file=http://nexus3-${GUID}-nexus.apps.na39.openshift.opentlc.com/repository/releases/com/openshift/evg/roadshow/${app}/1.0/${app}-1.0.war"

            openshiftTag alias: 'false',  destStream: app, destTag: "${devTag}", destinationnamespace: "${GUID}-parks-dev", namespace: "${GUID}-parks-dev", srcStream: app, srcTag: 'latest', verbose: 'false'
          }

          // Deploy the built image to the Development Environment.
          stage('Deploy to Dev') {
            echo "Deploying container image to Development Project"
            sh "${ocnd} set image dc/${app} ${app}=172.30.1.1:5000/${GUID}-parks-dev/${app}:${devTag}"

            openshiftDeploy  depCfg: app, namespace: "${GUID}-parks-dev", waitTime: '30', waitUnit: 'min'
            openshiftVerifyDeployment  depCfg: app, namespace: "${GUID}-parks-dev", replicaCount: '1', verbose: 'false', verifyReplicaCount: 'true'
            openshiftVerifyService  namespace: "${GUID}-parks-dev", svcName: app, verbose: 'false'
          }

          // Run Integration Tests in the Development Environment.
          stage('Integration Tests') {
            sleep 5
          }

          // Copy Image to Nexus Docker Registry
          stage('Copy Image to Nexus Docker Registry') {
            echo "Copy image to Nexus Docker Registry"
            // sh "skopeo copy --src-tls-verify=false --dest-tls-verify=false --screds=openshift:\$(oc whoami -t)  --dcreds=admin:admin123 docker://docker-registry.default.svc.cluster.local:5000/${GUID}-parks-dev/${app}:${devTag} docker://nexus-registry-${GUID}-nexus.apps.${CLUSTER}/${GUID}-parks-dev/${app}:${devTag}"
            openshiftTag alias: 'false',  destStream: app, destTag: "${prodTag}", destinationNamespace: "${GUID}-parks-prod", namespace: "${GUID}-parks-dev", srcStream: app, srcTag: devTag, verbose: 'false'
          }

          def activeApp = "${app}-green" // doesn't matter, will get overwritten
          def destApp   = "${app}-blue" // doesn't matter, will get overwritten

          stage('Blue/Green Production Deployment') {
            activeApp = sh(returnStdout: true, script: "${ocnp} get route ${app} --template='{{ .spec.to.name }}'").trim()
            
            // note that we want the *inactive* one
            if (activeApp == "${app}-blue"){
                destApp = "${app}-green"
            } else if (activeApp =="${app}-green") {
                destApp = "${app}-blue"
            } else{
                echo activeApp
            }
           
            sh "${ocnp} set image dc/${destApp} ${destApp}=docker-registry.default.svc:5000/${GUID}-parks-prod/${app}:${prodTag}"

            openshiftDeploy  depCfg: destApp, namespace: "${GUID}-parks-prod", waitTime: '30', waitUnit: 'min'
            openshiftVerifyDeployment  depCfg: destApp, namespace: "${GUID}-parks-prod", replicaCount: '1', verbose: 'false', verifyReplicaCount: 'true'
            openshiftVerifyService  namespace: "${GUID}-parks-prod", svcName: destApp, verbose: 'false'
          }

          stage('Switch over to new Version') {
            echo "Switching Production application to ${destApp}."

            sh "${ocnp} label svc ${activeApp} type-"
            sh "${ocnp} label svc ${destApp} type=parksmap-backend --overwrite"
            sh "${ocnp} set route-backends ${app} ${destApp}=1 ${activeApp}=0"

            sh "curl http://\$(${ocnp} get route ${app} --template='{{ .spec.host }}')/ws/load/data/"
          }
    }
}

// Convenience Functions to read variables from the pom.xml
// Do not change anything below this line.
def getVersionFromPom(pom) {
  def matcher = readFile(pom) =~ '<version>(.+)</version>'
  matcher ? matcher[0][1] : null
}
def getGroupIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<groupId>(.+)</groupId>'
  matcher ? matcher[0][1] : null
}
def getArtifactIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<artifactId>(.+)</artifactId>'
  matcher ? matcher[0][1] : null
}
